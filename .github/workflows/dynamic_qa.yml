name: dynamic-qa-env

on:
  pull_request:
    types: [opened, synchronize, closed, ready_for_review, converted_to_draft]
    branches:
      - main
  workflow_dispatch:

env:
  DB_USERNAME: ebroot
  DB_PORT: 5432
  DB_NAME: postgres
  PACKAGE_NAME: feature-${{ github.event.pull_request.number }}
  PACKAGE_ZIP: feature-${{ github.event.pull_request.number }}.zip
  PACKAGE_ZIP_PATH: feature-${{ github.event.pull_request.number }}/feature-${{ github.event.pull_request.number }}.zip

jobs:
  create-deployment-preview:
    if: >
      (github.event.action == 'opened' || github.event.action == 'ready_for_review' || github.event.action == 'reopened') && 
      github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Create ZIP deployment package
        run: |
          cd restaurant_picker
          zip -r ../$PACKAGE_NAME . *

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"

      - name: Upload package to S3 bucket
        run: aws s3 cp $PACKAGE_ZIP s3://restaurant-picker/$PACKAGE_NAME/

      - name: Put temporary password into Environment Variable
        run: echo "TEMP_DB_PASSWORD=$(uuidgen)" >> $GITHUB_ENV

      - name: Create RDS Instance
        run: |
          aws rds create-db-instance \
          --db-name ${{ env.DB_NAME }} \
          --db-instance-identifier ${{ env.PACKAGE_NAME }}-postgres-db \
          --db-instance-class db.t3.micro \
          --allocated-storage 5 \
          --engine postgres \
          --region 'us-east-2' \
          --master-username ${{ env.DB_USERNAME }} \
          --no-manage-master-user-password \
          --master-user-password ${{ env.TEMP_DB_PASSWORD }} \
          --port ${{ env.DB_PORT }} \
          --no-multi-az \
          --debug

      - name: Create new ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name RestaurantPicker \
          --source-bundle S3Bucket="restaurant-picker",S3Key=${{ env.PACKAGE_ZIP_PATH }} \
          --version-label "${{ env.PACKAGE_NAME }}-${{ github.sha }}" \
          --description "${{ env.PACKAGE_NAME }}-commit-sha-${{ github.sha }}" \
          --debug

      - name: Put RDS Hostname into Environment Variable
        uses: nick-fields/retry@v2
        with:
          max_attempts: 40
          timeout_seconds: 20
          retry_wait_seconds: 15
          command: |
              RDS_HOSTNAME=$(aws rds describe-db-instances \
              --db-instance-identifier "${{ env.PACKAGE_NAME }}-postgres-db" \
              --output json \
              --query 'DBInstances[0].Endpoint.Address')
              if [ "$RDS_HOSTNAME" == "null" ]; then
                echo "RDS_HOSTNAME is null, exiting..."
                exit 1
              fi
              echo "RDS_HOSTNAME=${RDS_HOSTNAME}" >> $GITHUB_ENV

      - name: Deploy new ElasticBeanstalk Environment
        run: |
          aws elasticbeanstalk create-environment \
          --debug \
          --application-name RestaurantPicker \
          --environment-name RestaurantPicker-${{ env.PACKAGE_NAME }} \
          --version-label "${{ env.PACKAGE_NAME }}-${{ github.sha }}" \
          --template-name "restaurant-picker-feature-template" \
          --option-settings '[
            {
              "Namespace": "aws:elasticbeanstalk:application:environment",
              "OptionName": "RDS_DB_NAME",
              "Value": "${{ env.DB_NAME }}"
            }, {
              "Namespace": "aws:elasticbeanstalk:application:environment",
              "OptionName": "RDS_USERNAME",
              "Value": "${{ env.DB_USERNAME }}"
            }, {
              "Namespace": "aws:elasticbeanstalk:application:environment",
              "OptionName": "RDS_PASSWORD",
              "Value": "${{ env.TEMP_DB_PASSWORD }}"
            }, {
              "Namespace": "aws:elasticbeanstalk:application:environment",
              "OptionName": "RDS_HOSTNAME",
              "Value": ${{ env.RDS_HOSTNAME }}
            }, {
              "Namespace": "aws:elasticbeanstalk:application:environment",
              "OptionName": "RDS_PORT",
              "Value": "${{ env.DB_PORT }}"
            }
          ]'

      - name: Get EB Variables
        uses: nick-fields/retry@v2
        with:
          max_attempts: 40
          timeout_seconds: 20
          retry_wait_seconds: 15
          command: |
              EB_CNAME=$(aws elasticbeanstalk describe-environments \
              --environment-name "RestaurantPicker-${{ env.PACKAGE_NAME }}" \
              --region "us-east-2" \
              --query 'Environments[0].CNAME')
              if [ "$EB_CNAME" == "null" ]; then
                echo "EB_CNAME is null, exiting..."
                exit 1
              fi
              echo "EB_CNAME=${EB_CNAME}" >> $GITHUB_ENV

      - name: Set up environment as a subdomain
        run: |
          aws route53 change-resource-record-sets \
          --hosted-zone-id "Z08577757Z9WBXCTLOHL" \
          --change-batch '{
            "Changes": [
              {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "${{ env.PACKAGE_NAME }}.whereshouldweeattoday.com",
                  "Type": "A",
                  "AliasTarget": {
                    "HostedZoneId": "Z14LCN19Q5QHIC",
                    "DNSName": ${{ env.EB_CNAME }},
                    "EvaluateTargetHealth": false
                  }
                }
              }
            ]
          }'

      - name: Back up Post Environment URL to Slack
        run: |
          curl --request POST \
          --url ${{ secrets.SLACK_PR_CREATION_WEBHOOK_URL }} \
          --header 'Content-Type: application/json' \
          --data '{
            "user": "${{ github.triggering_actor }}",
            "env_url": "${{ env.PACKAGE_NAME }}.whereshouldweeattoday.com",
            "pr_title": "${{ github.event.pull_request.title }}"
          }'

  update-deployment-preview:
    if: >
      github.event.action == 'synchronize' && 
      github.event.pull_request.draft == false && 
      github.event.action != 'ready_for_review'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Create ZIP deployment package
        run: |
          cd restaurant_picker
          zip -r ../$PACKAGE_NAME . *

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"

      - name: Upload package to S3 bucket
        run: aws s3 cp $PACKAGE_ZIP s3://restaurant-picker/$PACKAGE_NAME/

      - name: Create new ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name RestaurantPicker \
          --source-bundle S3Bucket="restaurant-picker",S3Key=${{ env.PACKAGE_ZIP_PATH }} \
          --version-label "${{ env.PACKAGE_NAME }}-${{ github.sha }}" \
          --description "${{ env.PACKAGE_NAME }}-commit-sha-${{ github.sha }}"

      - name: Deploy new ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk update-environment \
          --environment-name RestaurantPicker-${{ env.PACKAGE_NAME }} \
          --version-label "${{ env.PACKAGE_NAME }}-${{ github.sha }}"

      - name: Post Environment URL to Slack
        id: slack_post
        run: |
          curl --request POST \
          --url ${{ secrets.SLACK_PR_UPDATE_WEBHOOK_URL }} \
          --header 'Content-Type: application/json' \
          --data '{
            "user": "${{ github.triggering_actor }}",
            "env_url": "${{ env.PACKAGE_NAME }}.whereshouldweeattoday.com",
            "pr_title": "${{ github.event.pull_request.title }}"
          }'


  delete-deployment-preview:
    if: github.event.action == 'closed' || github.event.action == 'converted_to_draft'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"

      - name: Remove package from S3 bucket
        run: aws s3 rm s3://restaurant-picker/$PACKAGE_NAME/$PACKAGE_ZIP

      - name: Get EB Variables
        uses: nick-fields/retry@v2
        with:
          max_attempts: 40
          timeout_seconds: 20
          retry_wait_seconds: 15
          command: |
              EB_CNAME=$(aws elasticbeanstalk describe-environments \
              --environment-name "RestaurantPicker-${{ env.PACKAGE_NAME }}" \
              --region "us-east-2" \
              --query 'Environments[0].CNAME')
              if [ "$EB_CNAME" == "null" ]; then
                echo "EB_CNAME is null, exiting..."
                exit 1
              fi
              echo "EB_CNAME=${EB_CNAME}" >> $GITHUB_ENV

      - name: Remove subdomain from environment
        run: |
          aws route53 change-resource-record-sets \
          --hosted-zone-id "Z08577757Z9WBXCTLOHL" \
          --change-batch '{
            "Changes": [
              {
                "Action": "DELETE",
                "ResourceRecordSet": {
                  "Name": "${{ env.PACKAGE_NAME }}.whereshouldweeattoday.com",
                  "Type": "A",
                  "AliasTarget": {
                    "HostedZoneId": "Z14LCN19Q5QHIC",
                    "DNSName": ${{ env.EB_CNAME }},
                    "EvaluateTargetHealth": false
                  }
                }
              }
            ]
          }'


      - name: Delete RDS Database
        run: |
          aws rds delete-db-instance \
          --db-instance-identifier ${{ env.PACKAGE_NAME }}-postgres-db \
          --skip-final-snapshot \
          --delete-automated-backups

      - name: Terminate Elastic Beanstalk Environment
        run: |
          aws elasticbeanstalk terminate-environment \
          --environment-name RestaurantPicker-${{ env.PACKAGE_NAME }} \
          --force-terminate

      - name: Delete Elastic Beanstalk Application Version
        run: |
          aws elasticbeanstalk delete-application-version \
          --application-name RestaurantPicker \
          --version-label "${{ env.PACKAGE_NAME }}-${{ github.sha }}"
          --no-delete-source-bundle 
