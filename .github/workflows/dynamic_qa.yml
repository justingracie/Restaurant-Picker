name: dynamic-qa-env

on:
  pull_request:
    types: [opened, synchronize, closed, ready_for_review, converted_to_draft]
    branches:
      - main
  workflow_dispatch:

env:
  DB_USERNAME: ebroot
  DB_PORT: 5432
  DB_NAME: postgres
  PACKAGE_NAME: feature-${{ github.event.pull_request.number }}

jobs:
  create-deployment-preview:
    if: >
      (github.event.action == 'opened' || github.event.action == 'ready_for_review' || github.event.action == 'reopened') && 
      github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    env:
      TEMP_DB_PASSWORD: uuidgen
      PACKAGE_ZIP: ${{ env.PACKAGE_NAME }}.zip
      PACKAGE_ZIP_PATH: ${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_ZIP }}
    steps:
      - uses: actions/checkout@master

      - name: Create ZIP deployment package
        run: |
          cd restaurant_picker
          zip -r ../$PACKAGE_NAME . *

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"

      - name: Upload package to S3 bucket
        run: aws s3 cp $PACKAGE_ZIP s3://restaurant-picker/$PACKAGE_NAME/

      - name: Create RDS Instance
        run: |
          aws rds create-db-instance \
          --db-name ${{ env.DB_NAME }} \
          --db-instance-identifier ${{ env.PACKAGE_NAME }}-postgres-db \
          --db-instance-class db.t3.micro \
          --storage 5 \
          --engine postgres \
          --region 'us-east-2' \
          --master-user-password ${{ env.TEMP_DB_PASSWORD }} \
          --port ${{ env.DB_PORT }} \
          --no-multi-az

      - name: Create new ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name RestaurantPicker \
          --source-bundle S3Bucket="restaurant-picker",S3Key=${{ env.PACKAGE_ZIP_PATH }} \
          --version-label "${{ env.PACKAGE_NAME }}-${{ github.sha }}" \
          --description "${{ env.PACKAGE_NAME }}-commit-sha-${{ github.sha }}"

      - name: Deploy new ElasticBeanstalk Application Version
        env:
          RDS_HOSTNAME: |
            aws rds describe-db-instances \
            --db-instance-identifier ${{ env.PACKAGE_NAME }}-postgres-db \
            --output json \ 
            --query 'DBInstances[0].Endpoint.Address'
        run: |
          aws elasticbeanstalk create-environment \
          --environment-name RestaurantPicker-${{ env.PACKAGE_NAME }} \
          --version-label "${{ env.PACKAGE_NAME }}-${{ github.sha }}" \
          --option_settings [
            {
              "Namespace": "aws:elasticbeanstalk:environment",
              "OptionName": "RDS_DB_NAME",
              "Value": ${{ env.DB_NAME }}
            }, {
              "Namespace": "aws:elasticbeanstalk:environment",
              "OptionName": "RDS_USERNAME",
              "Value": ${{ env.DB_USERNAME }}
            }, {
              "Namespace": "aws:elasticbeanstalk:environment",
              "OptionName": "RDS_PASSWORD",
              "Value": ${{ env.TEMP_DB_PASSWORD }}
            }, {
              "Namespace": "aws:elasticbeanstalk:environment",
              "OptionName": "RDS_HOSTNAME",
              "Value": ${{ env.RDS_HOSTNAME }},
            }, {
              "Namespace": "aws:elasticbeanstalk:environment",
              "OptionName": "RDS_PORT",
              "Value": ${{ env.DB_PORT }}
            }
          ]

  update-deployment-preview:
    if: >
      github.event.action == 'synchronize' && 
      github.event.pull_request.draft == false && 
      github.event.action != 'ready_for_review'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Create ZIP deployment package
        run: |
          cd restaurant_picker
          zip -r ../$PACKAGE_NAME . *

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"

      - name: Upload package to S3 bucket
        run: aws s3 cp $PACKAGE_ZIP s3://restaurant-picker/$PACKAGE_NAME/
        env:
          PACKAGE_ZIP: ${{ env.PACKAGE_NAME }}.zip

      # Does does not need DB Update

      - name: Create new ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name RestaurantPicker \
          --source-bundle S3Bucket="restaurant-picker",S3Key=${{ env.PACKAGE_ZIP_PATH }} \
          --version-label "${{ env.PACKAGE_NAME }}-${{ github.sha }}" \
          --description "${{ env.PACKAGE_NAME }}-commit-sha-${{ github.sha }}"

      - name: Deploy new ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk update-environment \
          --environment-name RestaurantPicker-${{ env.PACKAGE_NAME }} \
          --version-label "${{ env.PACKAGE_NAME }}-${{ github.sha }}"


  delete-deployment-preview:
    if: github.event.action == 'closed' || github.event.action == 'converted_to_draft'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"

      - name: Remove package from S3 bucket
        run: aws s3 rm s3://restaurant-picker/$PACKAGE_NAME/$PACKAGE_ZIP
        env:
          PACKAGE_ZIP: ${{ env.PACKAGE_NAME }}.zip

      - name: Delete RDS Database
        run: |
          aws rds delete-db-instance \
          --db-instance-identifier ${{ env.PACKAGE_NAME }}-postgres-db \
          --skip-final-snapshot \
          --delete-automated-backups

      - name: Terminate Elastic Beanstalk Environment
        run: |
          aws elasticbeanstalk terminate-environment \
          --environment-name RestaurantPicker-${{ env.PACKAGE_NAME }} \
          --force-terminate

      - name: Delete Elastic Beanstalk Application Version
        run: |
          aws elasticbeanstalk delete-application-version \
          --application-name RestaurantPicker \
          --version-label "${{ env.PACKAGE_NAME }}-${{ github.sha }}"
          --no-delete-source-bundle 

